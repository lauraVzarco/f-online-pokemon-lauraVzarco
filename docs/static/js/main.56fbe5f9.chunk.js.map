{"version":3,"sources":["Components/SearchBox.js","Components/Element.js","Components/List.js","App.js","serviceWorker.js","index.js"],"names":["SearchBox","react_default","a","createElement","placeholder","className","type","value","this","props","onChange","Component","Element","src","image","alt","id","name","map","types","index","key","List","_this","console","log","list","pokeList","sort","b","pokemon","src_Components_Element","sprites","front_default","class","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","pokemonInfo","filteredList","fecthPokeApi","fetchPokeApi","bind","assertThisInitialized","handleFilter","_this2","fetch","concat","then","response","json","data","pokemonList","push","setState","e","target","_this3","filteredPokeList","filter","toLowerCase","includes","src_Components_SearchBox","src_Components_List","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.56fbe5f9.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport './SearchBox.css';\r\n\r\nclass SearchBox extends Component {\r\n  render() {\r\n    return (\r\n      <input\r\n        placeholder='Filtra PokÃ©mons por nombre...'\r\n        className='inputFilter'\r\n        type='text'\r\n        value={this.props.value}\r\n        onChange={this.props.onChange}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBox;\r\n","import React, { Component } from 'react';\r\nimport './Element.css';\r\n\r\nclass Element extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className='pokemonCard'>\r\n                <div className='upCard'>\r\n                    <img\r\n                        src={this.props.image}\r\n                        className='pokeImage'\r\n                        alt=\"pokemon sprite\" />\r\n                    <div className='pokeId'>\r\n                        ID / {this.props.id}\r\n                    </div>\r\n                </div>\r\n                <div className='downCard'>\r\n                    <div className='pokeName'>\r\n                        {this.props.name}\r\n                    </div>\r\n                    <ul className='pokeType'>\r\n                        {this.props.type.map((types, index) =>\r\n                            <li\r\n                                key={index}\r\n                                className='type'>\r\n                                {types}\r\n                            </li>)}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Element;","import React, { Component } from 'react';\r\nimport Element from './Element';\r\nimport './List.css';\r\n\r\n\r\nclass List extends Component {\r\n    render() {\r\n        console.log(this.props.list, 'me quiero morir')\r\n        //Map en cada LI para mostrar las infos de las APIS una a una \r\n        const pokeList = this.props.list\r\n            .sort((a, b) => a.id - b.id)\r\n            .map((pokemon) => {\r\n                return (\r\n                    <li key={pokemon.id} className='pokemonInfo'>\r\n                        <Element\r\n                            list={this.props.list}\r\n                            id={pokemon.id}\r\n                            key={pokemon.id}\r\n                            name={pokemon.name}\r\n                            image={pokemon.sprites.front_default}\r\n                            type={pokemon.types.map((types) =>\r\n                                types.type.name)}\r\n                        />\r\n                    </li>\r\n                )\r\n            });\r\n        return (\r\n            <ul class='pokemonList'>\r\n                {pokeList}\r\n            </ul>\r\n        )\r\n    }\r\n}\r\nexport default List;","import React, { Component } from \"react\";\r\nimport SearchBox from './Components/SearchBox';\r\nimport List from './Components/List';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      pokemonInfo: [],\r\n      filteredList: ''\r\n    }\r\n    this.fecthPokeApi = this.fetchPokeApi.bind(this);\r\n    this.handleFilter = this.handleFilter.bind(this);\r\n  }\r\n\r\n\r\n  //Poke API fecth\r\n  componentDidMount() {\r\n    this.fetchPokeApi()\r\n  }\r\n\r\n  fetchPokeApi() {\r\n    for (let id = 1; id <= 25; id++) {\r\n      fetch(`https://pokeapi.co/api/v2/pokemon/${id}/`)\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          let pokemonList = this.state.pokemonInfo;\r\n          pokemonList.push(data);\r\n          this.setState({\r\n            pokemonInfo: pokemonList\r\n          })\r\n        })\r\n    }\r\n  }\r\n\r\n  //Filtrar pokemon\r\n  handleFilter(e) {\r\n    this.setState({\r\n      filteredList: e.target.value\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const filteredPokeList = this.state.pokemonInfo.filter((pokemon) => pokemon.name.toLowerCase().includes(this.state.filteredList.toLowerCase()))\r\n    return (\r\n      <main>\r\n        <div className='pikachuParts'>\r\n          <div className='blackTriangle1'></div>\r\n          <div className='blackTriangle2'></div>\r\n        </div>\r\n        <SearchBox\r\n          value={this.state.filteredList}\r\n          onChange={this.handleFilter} />\r\n        <List\r\n          list={filteredPokeList} />\r\n        <div className='pikachuParts'>\r\n          <div className='redCircle1'></div>\r\n          <div className='redCircle2'></div>\r\n        </div>\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App className='mainBackground' />, document.getElementById('root'));\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}